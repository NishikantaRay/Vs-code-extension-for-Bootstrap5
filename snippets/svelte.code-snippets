{
    "Svelte Bootstrap 5 Component Template": {
        "prefix": "!bs5-svelte",
        "body": [
            "<script>",
            "  export let ${1:title} = '${2:Hello Bootstrap 5!}';",
            "  $0",
            "</script>",
            "",
            "<div class=\"${3:container}\">",
            "  <h1 class=\"${4:display-4}\">{${1:title}}</h1>",
            "</div>",
            "",
            "<style>",
            "  /* Bootstrap 5 is assumed to be imported globally */",
            "</style>"
        ],
        "description": "Bootstrap 5 Svelte component template with props and reactive data"
    },
    
    "Svelte Bootstrap Button with Event": {
        "prefix": "bs5-svelte-btn",
        "body": [
            "<script>",
            "  export let ${1:buttonText} = '${2:Click me}';",
            "  export let ${3:variant} = '${4:primary}';",
            "  export let ${5:disabled} = false;",
            "  export let ${6:loading} = false;",
            "",
            "  function ${7:handleClick}(event) {",
            "    $0",
            "  }",
            "</script>",
            "",
            "<button",
            "  type=\"${8:button}\"",
            "  class=\"btn btn-{${3:variant}}\"",
            "  {${5:disabled}}",
            "  on:click={${7:handleClick}}",
            ">",
            "  {#if ${6:loading}}",
            "    <span class=\"spinner-border spinner-border-sm me-2\"></span>",
            "  {/if}",
            "  {${1:buttonText}}",
            "</button>"
        ],
        "description": "Svelte Bootstrap button with props, events, and loading state"
    },
    
    "Svelte Bootstrap Modal": {
        "prefix": "bs5-svelte-modal",
        "body": [
            "<script>",
            "  export let ${1:showModal} = false;",
            "  export let ${2:modalTitle} = '${3:Modal Title}';",
            "  export let ${4:modalId} = '${5:exampleModal}';",
            "",
            "  function ${6:closeModal}() {",
            "    ${1:showModal} = false;",
            "  }",
            "",
            "  function ${7:saveChanges}() {",
            "    $0",
            "    ${6:closeModal}();",
            "  }",
            "</script>",
            "",
            "{#if ${1:showModal}}",
            "  <div",
            "    class=\"modal fade show\"",
            "    id={${4:modalId}}",
            "    tabindex=\"-1\"",
            "    aria-labelledby=\"{${4:modalId}}Label\"",
            "    style=\"display: block\"",
            "  >",
            "    <div class=\"modal-dialog${8: modal-lg}\">",
            "      <div class=\"modal-content\">",
            "        <div class=\"modal-header\">",
            "          <h5 class=\"modal-title\" id=\"{${4:modalId}}Label\">",
            "            {${2:modalTitle}}",
            "          </h5>",
            "          <button",
            "            type=\"button\"",
            "            class=\"btn-close\"",
            "            aria-label=\"Close\"",
            "            on:click={${6:closeModal}}",
            "          ></button>",
            "        </div>",
            "        <div class=\"modal-body\">",
            "          <slot></slot>",
            "        </div>",
            "        <div class=\"modal-footer\">",
            "          <button type=\"button\" class=\"btn btn-secondary\" on:click={${6:closeModal}}>",
            "            ${9:Close}",
            "          </button>",
            "          <button type=\"button\" class=\"btn btn-primary\" on:click={${7:saveChanges}}>",
            "            ${10:Save changes}",
            "          </button>",
            "        </div>",
            "      </div>",
            "    </div>",
            "  </div>",
            "  <div class=\"modal-backdrop fade show\"></div>",
            "{/if}"
        ],
        "description": "Svelte Bootstrap modal with reactive visibility and slot content"
    },
    
    "Svelte Bootstrap Form with Binding": {
        "prefix": "bs5-svelte-form",
        "body": [
            "<script>",
            "  export let ${1:formData} = {",
            "    ${2:fieldName}: ''",
            "  };",
            "",
            "  let ${3:errors} = {};",
            "  let ${4:isSubmitting} = false;",
            "",
            "  function ${5:validateField}(fieldName, value) {",
            "    ${3:errors}[fieldName] = '';",
            "    if (!value.trim()) {",
            "      ${3:errors}[fieldName] = `${fieldName} is required`;",
            "    }",
            "    ${3:errors} = ${3:errors};",
            "  }",
            "",
            "  async function ${6:handleSubmit}(event) {",
            "    event.preventDefault();",
            "    ${4:isSubmitting} = true;",
            "    $0",
            "    ${4:isSubmitting} = false;",
            "  }",
            "</script>",
            "",
            "<form on:submit={${6:handleSubmit}} novalidate>",
            "  <div class=\"mb-3\">",
            "    <label for=\"${2:fieldName}\" class=\"form-label\">${7:Field Label}</label>",
            "    <input",
            "      type=\"${8:text}\"",
            "      class=\"form-control\"",
            "      class:is-invalid={${3:errors}.${2:fieldName}}",
            "      class:is-valid={${1:formData}.${2:fieldName} && !${3:errors}.${2:fieldName}}",
            "      id=\"${2:fieldName}\"",
            "      bind:value={${1:formData}.${2:fieldName}}",
            "      placeholder=\"${9:Enter value}\"",
            "      on:blur={() => ${5:validateField}('${2:fieldName}', ${1:formData}.${2:fieldName})}",
            "    >",
            "    {#if ${3:errors}.${2:fieldName}}",
            "      <div class=\"invalid-feedback\">",
            "        {${3:errors}.${2:fieldName}}",
            "      </div>",
            "    {:else if ${1:formData}.${2:fieldName}}",
            "      <div class=\"valid-feedback\">",
            "        ${10:Looks good!}",
            "      </div>",
            "    {/if}",
            "  </div>",
            "  <button type=\"submit\" class=\"btn btn-primary\" disabled={${4:isSubmitting}}>",
            "    {#if ${4:isSubmitting}}",
            "      <span class=\"spinner-border spinner-border-sm me-2\"></span>",
            "    {/if}",
            "    {${4:isSubmitting} ? '${11:Submitting...}' : '${12:Submit}'}",
            "  </button>",
            "</form>"
        ],
        "description": "Svelte Bootstrap form with two-way binding and validation"
    },
    
    "Svelte Bootstrap Alert": {
        "prefix": "bs5-svelte-alert",
        "body": [
            "<script>",
            "  export let ${1:show} = true;",
            "  export let ${2:type} = '${3:primary}';",
            "  export let ${4:message} = '';",
            "  export let ${5:icon} = '${6:fas fa-info-circle}';",
            "",
            "  function ${7:dismiss}() {",
            "    ${1:show} = false;",
            "  }",
            "</script>",
            "",
            "{#if ${1:show}}",
            "  <div",
            "    class=\"alert alert-{${2:type}} alert-dismissible fade show\"",
            "    role=\"alert\"",
            "  >",
            "    <i class=\"{${5:icon}} me-2\"></i>",
            "    {${4:message}}",
            "    <button",
            "      type=\"button\"",
            "      class=\"btn-close\"",
            "      aria-label=\"Close\"",
            "      on:click={${7:dismiss}}",
            "    ></button>",
            "  </div>",
            "{/if}"
        ],
        "description": "Svelte Bootstrap alert with reactive visibility and dismiss functionality"
    },
    
    "Svelte Bootstrap Card List with Each": {
        "prefix": "bs5-svelte-card-list",
        "body": [
            "<script>",
            "  export let ${1:items} = [];",
            "",
            "  function ${2:selectItem}(item) {",
            "    $0",
            "  }",
            "</script>",
            "",
            "<div class=\"row\">",
            "  {#each ${1:items} as ${3:item} (${3:item}.${4:id})}",
            "    <div class=\"col-${5:md-6} col-${6:lg-4} mb-4\">",
            "      <div class=\"card h-100\">",
            "        {#if ${3:item}.${7:imageUrl}}",
            "          <img",
            "            src={${3:item}.${7:imageUrl}}",
            "            class=\"card-img-top\"",
            "            alt={${3:item}.${8:title}}",
            "          >",
            "        {/if}",
            "        <div class=\"card-body d-flex flex-column\">",
            "          <h5 class=\"card-title\">{${3:item}.${8:title}}</h5>",
            "          <p class=\"card-text flex-grow-1\">{${3:item}.${9:description}}</p>",
            "          <button",
            "            class=\"btn btn-${10:primary} mt-auto\"",
            "            on:click={() => ${2:selectItem}(${3:item})}",
            "          >",
            "            ${11:Select}",
            "          </button>",
            "        </div>",
            "      </div>",
            "    </div>",
            "  {:else}",
            "    <div class=\"col-12\">",
            "      <p class=\"text-center text-muted\">${12:No items to display}</p>",
            "    </div>",
            "  {/each}",
            "</div>"
        ],
        "description": "Svelte Bootstrap card list with each block and key for reactivity"
    },
    
    "Svelte Bootstrap Navbar": {
        "prefix": "bs5-svelte-navbar",
        "body": [
            "<script>",
            "  export let ${1:brandName} = '${2:Brand}';",
            "  export let ${3:navLinks} = [];",
            "",
            "  let ${4:isOpen} = false;",
            "",
            "  function ${5:toggleNav}() {",
            "    ${4:isOpen} = !${4:isOpen};",
            "  }",
            "",
            "  function ${6:closeNav}() {",
            "    ${4:isOpen} = false;",
            "  }",
            "</script>",
            "",
            "<nav class=\"navbar navbar-expand-${7:lg} navbar-${8:light} bg-${8:light}\">",
            "  <div class=\"container${9:-fluid}\">",
            "    <a class=\"navbar-brand\" href=\"${10:/}\">{${1:brandName}}</a>",
            "    <button",
            "      class=\"navbar-toggler\"",
            "      type=\"button\"",
            "      aria-controls=\"navbarNav\"",
            "      aria-expanded={${4:isOpen}}",
            "      aria-label=\"Toggle navigation\"",
            "      on:click={${5:toggleNav}}",
            "    >",
            "      <span class=\"navbar-toggler-icon\"></span>",
            "    </button>",
            "    <div",
            "      class=\"collapse navbar-collapse\"",
            "      class:show={${4:isOpen}}",
            "      id=\"navbarNav\"",
            "    >",
            "      <ul class=\"navbar-nav${11: ms-auto}\">",
            "        {#each ${3:navLinks} as ${12:link}}",
            "          <li class=\"nav-item\">",
            "            <a",
            "              class=\"nav-link\"",
            "              href={${12:link}.${13:href}}",
            "              on:click={${6:closeNav}}",
            "            >",
            "              {${12:link}.${14:text}}",
            "            </a>",
            "          </li>",
            "        {/each}",
            "      </ul>",
            "    </div>",
            "  </div>",
            "</nav>"
        ],
        "description": "Svelte Bootstrap navbar with responsive toggle and navigation links"
    },
    
    "Svelte Bootstrap Table with Sorting": {
        "prefix": "bs5-svelte-table",
        "body": [
            "<script>",
            "  export let ${1:items} = [];",
            "  export let ${2:columns} = [];",
            "",
            "  let ${3:sortBy} = '';",
            "  let ${4:sortOrder} = 'asc';",
            "",
            "  $: ${5:sortedItems} = ${1:items}.sort((a, b) => {",
            "    if (!${3:sortBy}) return 0;",
            "    const aVal = a[${3:sortBy}];",
            "    const bVal = b[${3:sortBy}];",
            "    const modifier = ${4:sortOrder} === 'asc' ? 1 : -1;",
            "    return aVal > bVal ? modifier : aVal < bVal ? -modifier : 0;",
            "  });",
            "",
            "  function ${6:sort}(column) {",
            "    if (${3:sortBy} === column) {",
            "      ${4:sortOrder} = ${4:sortOrder} === 'asc' ? 'desc' : 'asc';",
            "    } else {",
            "      ${3:sortBy} = column;",
            "      ${4:sortOrder} = 'asc';",
            "    }",
            "  }",
            "</script>",
            "",
            "<div class=\"table-responsive\">",
            "  <table class=\"table${7: table-striped table-hover}\">",
            "    <thead class=\"${8:table-dark}\">",
            "      <tr>",
            "        {#each ${2:columns} as ${9:column}}",
            "          <th",
            "            scope=\"col\"",
            "            class:user-select-none={${9:column}.${10:sortable}}",
            "            style=\"cursor: {${9:column}.${10:sortable} ? 'pointer' : 'default'}\"",
            "            on:click={() => ${9:column}.${10:sortable} && ${6:sort}(${9:column}.${11:key})}",
            "          >",
            "            {${9:column}.${12:label}}",
            "            {#if ${9:column}.${10:sortable} && ${3:sortBy} === ${9:column}.${11:key}}",
            "              <i",
            "                class=\"fas fa-sort-{${4:sortOrder} === 'asc' ? 'up' : 'down'} ms-1\"",
            "              ></i>",
            "            {:else if ${9:column}.${10:sortable}}",
            "              <i class=\"fas fa-sort ms-1 text-muted\"></i>",
            "            {/if}",
            "          </th>",
            "        {/each}",
            "      </tr>",
            "    </thead>",
            "    <tbody>",
            "      {#each ${5:sortedItems} as ${13:item} (${13:item}.${14:id})}",
            "        <tr>",
            "          {#each ${2:columns} as ${9:column}}",
            "            <td>{${13:item}[${9:column}.${11:key}]}</td>",
            "          {/each}",
            "        </tr>",
            "      {:else}",
            "        <tr>",
            "          <td colspan={${2:columns}.length} class=\"text-center text-muted\">",
            "            ${15:No data available}",
            "          </td>",
            "        </tr>",
            "      {/each}",
            "    </tbody>",
            "  </table>",
            "</div>"
        ],
        "description": "Svelte Bootstrap table with reactive sorting and responsive design"
    },
    
    "Svelte Bootstrap Pagination": {
        "prefix": "bs5-svelte-pagination",
        "body": [
            "<script>",
            "  export let ${1:currentPage} = 1;",
            "  export let ${2:totalPages} = 1;",
            "  export let ${3:maxVisible} = 5;",
            "",
            "  $: ${4:visiblePages} = (() => {",
            "    const start = Math.max(1, ${1:currentPage} - Math.floor(${3:maxVisible} / 2));",
            "    const end = Math.min(${2:totalPages}, start + ${3:maxVisible} - 1);",
            "    return Array.from({ length: end - start + 1 }, (_, i) => start + i);",
            "  })();",
            "",
            "  function ${5:goToPage}(page) {",
            "    if (page >= 1 && page <= ${2:totalPages}) {",
            "      ${1:currentPage} = page;",
            "      $0",
            "    }",
            "  }",
            "</script>",
            "",
            "<nav aria-label=\"${6:Page navigation}\">",
            "  <ul class=\"pagination${7: justify-content-center}\">",
            "    <li class=\"page-item\" class:disabled={${1:currentPage} === 1}>",
            "      <button",
            "        class=\"page-link\"",
            "        disabled={${1:currentPage} === 1}",
            "        on:click={() => ${5:goToPage}(${1:currentPage} - 1)}",
            "        aria-label=\"Previous\"",
            "      >",
            "        <span aria-hidden=\"true\">&laquo;</span>",
            "      </button>",
            "    </li>",
            "    {#each ${4:visiblePages} as ${8:page}}",
            "      <li class=\"page-item\" class:active={${8:page} === ${1:currentPage}}>",
            "        <button class=\"page-link\" on:click={() => ${5:goToPage}(${8:page})}>",
            "          {${8:page}}",
            "        </button>",
            "      </li>",
            "    {/each}",
            "    <li class=\"page-item\" class:disabled={${1:currentPage} === ${2:totalPages}}>",
            "      <button",
            "        class=\"page-link\"",
            "        disabled={${1:currentPage} === ${2:totalPages}}",
            "        on:click={() => ${5:goToPage}(${1:currentPage} + 1)}",
            "        aria-label=\"Next\"",
            "      >",
            "        <span aria-hidden=\"true\">&raquo;</span>",
            "      </button>",
            "    </li>",
            "  </ul>",
            "</nav>"
        ],
        "description": "Svelte Bootstrap pagination with reactive page calculation"
    },
    
    "Svelte Bootstrap Dropdown": {
        "prefix": "bs5-svelte-dropdown",
        "body": [
            "<script>",
            "  export let ${1:options} = [];",
            "  export let ${2:selectedOption} = null;",
            "  export let ${3:dropdownText} = '${4:Select option}';",
            "",
            "  let ${5:isOpen} = false;",
            "",
            "  function ${6:selectOption}(option) {",
            "    ${2:selectedOption} = option;",
            "    ${5:isOpen} = false;",
            "    $0",
            "  }",
            "",
            "  function ${7:toggleDropdown}() {",
            "    ${5:isOpen} = !${5:isOpen};",
            "  }",
            "</script>",
            "",
            "<div class=\"dropdown\">",
            "  <button",
            "    class=\"btn btn-${8:secondary} dropdown-toggle\"",
            "    type=\"button\"",
            "    aria-expanded={${5:isOpen}}",
            "    on:click={${7:toggleDropdown}}",
            "  >",
            "    {${2:selectedOption}?.${9:text} || ${3:dropdownText}}",
            "  </button>",
            "  {#if ${5:isOpen}}",
            "    <ul class=\"dropdown-menu show\">",
            "      {#each ${1:options} as ${10:option}}",
            "        <li>",
            "          <button",
            "            class=\"dropdown-item\"",
            "            class:active={${2:selectedOption} === ${10:option}}",
            "            on:click={() => ${6:selectOption}(${10:option})}",
            "          >",
            "            {${10:option}.${9:text}}",
            "          </button>",
            "        </li>",
            "      {:else}",
            "        <li>",
            "          <span class=\"dropdown-item-text text-muted\">${11:No options available}</span>",
            "        </li>",
            "      {/each}",
            "    </ul>",
            "  {/if}",
            "</div>"
        ],
        "description": "Svelte Bootstrap dropdown with reactive state and option selection"
    }
}